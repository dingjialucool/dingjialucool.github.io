<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>查询部门及所有子部门</title>
      <link href="/2019/09/09/%E6%9F%A5%E8%AF%A2%E9%83%A8%E9%97%A8%E5%8F%8A%E6%89%80%E6%9C%89%E5%AD%90%E9%83%A8%E9%97%A8/"/>
      <url>/2019/09/09/%E6%9F%A5%E8%AF%A2%E9%83%A8%E9%97%A8%E5%8F%8A%E6%89%80%E6%9C%89%E5%AD%90%E9%83%A8%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="查询部门及所有子部门"><a href="#查询部门及所有子部门" class="headerlink" title="查询部门及所有子部门"></a>查询部门及所有子部门</h2><p>最近项目出现了这个需求，记录一下。<a id="more"></a></p><p>1.需求：查询该部门及部门下所有子部门的数据<br>2.实现方式：</p><ul><li><p>不改变数据库的表的结构，在后台进行业务处理。（使用递归）<br>  我一开始想到的就是使用递归方式来实现。递归查询出部门及子部门的部门主键（是一个数组），然后在sql中用 in的方式实现。<br>  直接上代码：</p><p> public void getDeptData(Map&lt;String,Object&gt; param){</p><pre><code>List list = new ArrayList&lt;String&gt;();list.add(deptId);childDept = getChildDeptId(deptId, list);param.put(&quot;deptId&quot;, childDept);</code></pre><p> }     </p><p> //向下递归获取部门 子部门<br> private List getChildDeptId(String deptId,List list2){</p><pre><code>QueryWrapper&lt;Dept&gt; queryWrapper = new QueryWrapper&lt;Dept&gt;();queryWrapper.eq(&quot;parent_id&quot;, deptId).eq(&quot;data_status&quot;,     GlobalConstant.DATA_STATUS_VALID);List&lt;Dept&gt; list = deptService.list(queryWrapper);for (Dept dept : list) {    list2.add(dept.getUuid());    getChildDeptId(dept.getUuid(), list2);}return list2;</code></pre><p> }</p></li><li><p>改变数据库表的结构，加一个字段<br> 这种方式是同事说的，算是比较简单的。往部门表中添加一个dept_code字段，这个字段是由父部门dept_code+部门主键id,然后在sql中用like来查询dept_code字段。关键代码：</p></li></ul><pre><code>dept.setDeptCode(one.getDeptCode()+&quot;-&quot;+dept.getUuid());    d.dept_code like CONCAT(d2.dept_code,&apos;%&apos;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登录拦截</title>
      <link href="/2019/06/03/%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AA/"/>
      <url>/2019/06/03/%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AA/</url>
      
        <content type="html"><![CDATA[<h2 id="登录拦截"><a href="#登录拦截" class="headerlink" title="登录拦截"></a>登录拦截</h2><p>因为项目中涉及到这个，自己也接触了，所以记录一下。<a id="more"></a></p><p>认证过程<br>登录：<br>1.第一次认证：第一次登录，用户从浏览器输入用户名/密码，提交到服务器的登录处理的Controller层。</p><pre><code>QueryWrapper&lt;Person&gt; queryWrapper = new QueryWrapper();        queryWrapper.eq(&quot;data_status&quot;, GlobalConstant.DATA_STATUS_VALID);       queryWrapper.eq(&quot;phone&quot;,param.get(&quot;username&quot;)).eq(&quot;password&quot;,MD5Util.getMD5(param.get(&quot;password&quot;).toString())).or(i -&gt;i.eq(&quot;email&quot;,param.get(&quot;username&quot;)).eq(&quot;password&quot;,MD5Util.getMD5(param.get(&quot;password&quot;).toString())).eq(&quot;data_status&quot;, GlobalConstant.DATA_STATUS_VALID));        Person one = personService.getOne(queryWrapper);</code></pre><p>2.Controller调用认证服务进行用户名密码认证，如果认证通过，Controller层调用用户信息服务获取用户信息；</p><pre><code>System.out.println(&quot;登录成功！&quot;);    String id = one.getUuid();//id 当前用户ID</code></pre><p>3.返回用户信息后，Controller从配置文件中获取Token签名生成的秘钥信息，进行Token的生成；</p><pre><code>//issuer 该JWT的签发者，是否使用是可选的          String issuer = &quot;&quot;;          //subject 该JWT所面向的用户，是否使用是可选的          String subject = &quot;&quot;;          //ttlMillis 什么时候过期，这里是一个Unix时间戳，是否使用是可选的          long ttlMillis = 1000 * 60 * 30;           //audience 接收该JWT的一方，是否使用是可选的          String audience = &quot;&quot;;          String token = TokenUtil.createJWT(id,issuer,subject,ttlMillis,audience);        public static String createJWT(String id,String issuer,String subject,long ttlMillis, String audience){        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;        long nowMillis = System.currentTimeMillis();        Date now = new Date(nowMillis);        byte[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(APP_KEY);        Key signingKey = new SecretKeySpec(apiKeySecretBytes, signatureAlgorithm.getJcaName());        JwtBuilder jwtBuilder = Jwts.builder()                .setId(id)                .setSubject(subject)                .setIssuedAt(now)                .setIssuer(issuer)                .setAudience(audience)                .signWith(signatureAlgorithm,signingKey);    //设置Token的过期时间        if(ttlMillis &gt;0){              long expMillis = nowMillis + ttlMillis;            Date exp = new Date(expMillis);            jwtBuilder.setExpiration(exp);        }        return jwtBuilder.compact();    }</code></pre><p>4.生成Token的过程中可以调用第三方的JWT Lib生成签名后的JWT数据；</p><pre><code>String token = TokenUtil.createJWT(id,issuer,subject,ttlMillis,audience);</code></pre><p>5.完成JWT数据签名后，将其设置到COOKIE对象中，并重定向到首页，完成登录过程；</p><pre><code>HashMap&lt;String,String&gt; result = new HashMap&lt;&gt;();     result.put(&quot;userId&quot;, id);     result.put(&quot;token&quot;, token);         return ResultFactory.success(result);</code></pre><p>请求认证：<br>基于Token的认证机制会在每一次请求中都带上完成签名的Token信息，这个Token信息可能在COOKIE中，也可能在HTTP的Authorization头中；</p><ul><li>客户端（APP客户端或浏览器）通过GET或POST请求访问资源（页面或调用API）；</li><li>认证服务作为一个Middleware HOOK 对请求进行拦截，首先在cookie中查找Token信息，如果没有找到，则在HTTP Authorization Head中查找；</li><li>如果找到Token信息，则根据配置文件中的签名加密秘钥，调用JWT Lib对Token信息进行解密和解码；</li><li>完成解码并验证签名通过后，对Token中的exp、nbf、aud等信息进行验证；</li><li>全部通过后，根据获取的用户的角色权限信息，进行对请求的资源的权限逻辑判断；</li><li>如果权限逻辑判断通过则通过Response对象返回；否则则返回HTTP 401；</li></ul><p>相关类：<br>登录Controller类</p><pre><code>@RequestMapping(&quot;/login&quot;)    public Result login(@RequestBody Map&lt;String, Object&gt; param) {    QueryWrapper&lt;Person&gt; queryWrapper = new QueryWrapper();    queryWrapper.eq(&quot;data_status&quot;, GlobalConstant.DATA_STATUS_VALID);    queryWrapper.eq(&quot;phone&quot;,param.get(&quot;username&quot;)).eq(&quot;password&quot;,MD5Util.getMD5(param.get(&quot;password&quot;).toString())).or(i -&gt;i.eq(&quot;email&quot;,param.get(&quot;username&quot;)).eq(&quot;password&quot;,MD5Util.getMD5(param.get(&quot;password&quot;).toString())).eq(&quot;data_status&quot;, GlobalConstant.DATA_STATUS_VALID));        Person one = personService.getOne(queryWrapper);        if(one !=null) {            System.out.println(&quot;登录成功！&quot;);            //id 当前用户ID            String id = one.getUuid();            //issuer 该JWT的签发者，是否使用是可选的            String issuer = &quot;&quot;;            //subject 该JWT所面向的用户，是否使用是可选的            String subject = &quot;&quot;;            //ttlMillis 什么时候过期，这里是一个Unix时间戳，是否使用是可选的            long ttlMillis = 1000 * 60 * 30;             //audience 接收该JWT的一方，是否使用是可选的            String audience = &quot;&quot;;            String token = TokenUtil.createJWT(id,issuer,subject,ttlMillis,audience);            HashMap&lt;String,String&gt; result = new HashMap&lt;&gt;();            result.put(&quot;userId&quot;, id);            result.put(&quot;token&quot;, token);                  return ResultFactory.success(result);        }        System.out.println(&quot;登录失败！&quot;);        return ResultFactory.fail(null);    }</code></pre><p>TokenInterceptor拦截器：</p><pre><code>@Componentpublic class TokenInterceptor implements HandlerInterceptor{     @Override        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)                throws Exception {         //获取token            String tokenEnmu= request.getHeader(&quot;authorization&quot;);                 if(!CommonUtils.isEmpty(tokenEnmu)) {                try {                    Claims claims = TokenUtil.getClaims(tokenEnmu);                    String personId = claims.getId();                    Date dateExpiration = claims.getExpiration();                    if(!CommonUtils.isObjEmpty(dateExpiration)) {                        Person person = new Person();                        person.setUuid(personId);                        //threadlocal保存用户id，用来更新操作记录                        ThreadLocalUtil.setResources(person);                        //更新时间戳，用来生成token                        long ttlMillis = 1000 * 60 * 30;                        String newtoken = TokenUtil.createJWT(personId,claims.getIssuer(),claims.getSubject(),ttlMillis,claims.getAudience());                        //将token设置到浏览器                        response.setHeader(&quot;authorization&quot;, newtoken);                    }else {                        response.setStatus(401);                    }                } catch (Exception e) {                    response.setStatus(401);                }                }else {                response.setStatus(401);            }            //返回 false 则请求中断            return true;        }        @Override        public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,                ModelAndView modelAndView) throws Exception {//            log.info(&quot;postHandle:请求后调用&quot;);//            获取塞入的用户id//            Person personInfo =  ThreadLocalUtil.getResources();//            System.out.println(&quot;用户id：&quot;+personInfo.getUuid()+&quot;-----------&quot;);        }        @Override        public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)                throws Exception {//            log.info(&quot;afterCompletion:请求调用完成后回调方法，即在视图渲染完成后回调&quot;);        }    }</code></pre><p>自定义拦截器：</p><pre><code>@Configurationpublic class TokenConfig extends WebMvcConfigurationSupport{        @Autowired    private TokenInterceptor tokenInterceptor;    @Override    protected void addInterceptors(InterceptorRegistry registry) {    registry.addInterceptor(tokenInterceptor).addPathPatterns(&quot;/**&quot;).excludePathPattern        s(&quot;/api/login&quot;, &quot;/api/file/upload&quot;,&quot;/api/file/ioimage&quot;, &quot;/api/kafka/send/*&quot;,                 &quot;/api/basedata&quot;, &quot;/api/report/**&quot;);    //    super.addInterceptors(registry);    }}</code></pre><p>TokenUtil工具类：</p><pre><code>public class TokenUtil {    private static final String APP_KEY = &quot;user_key&quot;; //进行数字签名的私钥    /**     * 一个JWT实际上就是一个字符串，它由三部分组成，头部(Header)、载荷(Payload)与签名(Signature)     * @param id 当前用户ID     * @param issuer 该JWT的签发者，是否使用是可选的     * @param subject 该JWT所面向的用户，是否使用是可选的     * @param ttlMillis 什么时候过期，这里是一个Unix时间戳，是否使用是可选的     * @param audience 接收该JWT的一方，是否使用是可选的     * @return     */    public static String createJWT(String id,String issuer,String subject,long ttlMillis, String audience){        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;        long nowMillis = System.currentTimeMillis();        Date now = new Date(nowMillis);        byte[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(APP_KEY);        Key signingKey = new SecretKeySpec(apiKeySecretBytes, signatureAlgorithm.getJcaName());        JwtBuilder jwtBuilder = Jwts.builder()                .setId(id)                .setSubject(subject)                .setIssuedAt(now)                .setIssuer(issuer)                .setAudience(audience)                .signWith(signatureAlgorithm,signingKey);    //设置Token的过期时间        if(ttlMillis &gt;0){              long expMillis = nowMillis + ttlMillis;            Date exp = new Date(expMillis);            jwtBuilder.setExpiration(exp);        }        return jwtBuilder.compact();    }     //私钥解密token信息    public static Claims getClaims(String jwt) {        return Jwts.parser()                .setSigningKey(DatatypeConverter.parseBase64Binary(APP_KEY))                .parseClaimsJws(jwt).getBody();    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>码值表</title>
      <link href="/2019/06/03/%E7%A0%81%E5%80%BC%E8%A1%A8/"/>
      <url>/2019/06/03/%E7%A0%81%E5%80%BC%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="码值表"><a href="#码值表" class="headerlink" title="码值表"></a>码值表</h2><p>是个值得记录的问题。<a id="more"></a></p><pre><code>前端在渲染页面时，常常拿到的是数据库字段的码值，并不是真正的值，往往会在前端写死，一个个码值所相对应的值。但是我们往往需要的是前端的码值不是写死的，需要从后台获取码值和所相对应的值，一般的解决方案就是在数据库添加一个码值表。举一个例子：前端写死的码值：const staticDict = function () {return {// 通用是否yesOrNo: { 0: &apos;否&apos;, 1: &apos;是&apos; },dataStatus: { 0: &apos;作废&apos;, 1: &apos;有效&apos; },select: [{ title: &apos;选择1&apos;, key: &apos;a1&apos;, other: &apos;其他值&apos; }, { title: &apos;选择2&apos;, key: &apos;a2&apos; }, { title: &apos;选择3&apos;, key: &apos;a3&apos; }],simple: { 1: &apos;苹果&apos;, 2: &apos;梨子&apos;, 3: &apos;香蕉&apos;, 4: &apos;橙子&apos;, 5: &apos;樱桃&apos; }, };};export default staticDict;当前端加载时，就会初始化码值import dictConfig from &apos;./dict-config&apos;;const heyuiConfig = () =&gt; {  const staticDict = dictConfig();  Object.keys(staticDict).forEach((key) =&gt; {    HeyUI.addDict(key, staticDict[key]);});后台建一个字典表，就不是死的了。CREATE TABLE `cb_basedata` (  `uuid` varchar(32) NOT NULL COMMENT &apos;uuid&apos;,  `typecode` varchar(50) DEFAULT NULL COMMENT &apos;类型代码&apos;,  `fieldcode` varchar(50) DEFAULT NULL COMMENT &apos;字段代码&apos;,  `typename` varchar(100) DEFAULT NULL COMMENT &apos;类型名称&apos;,  PRIMARY KEY (`uuid`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;字典&apos;;字典表的三个字段所相对应的就是前端的  yesOrNo  0 &apos;否&apos;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>401 Unauthorized是什么异常？</title>
      <link href="/2019/05/29/401%20Unauthorized%E6%98%AF%E4%BB%80%E4%B9%88%E5%BC%82%E5%B8%B8%EF%BC%9F/"/>
      <url>/2019/05/29/401%20Unauthorized%E6%98%AF%E4%BB%80%E4%B9%88%E5%BC%82%E5%B8%B8%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="401-Unauthorized是什么异常？"><a href="#401-Unauthorized是什么异常？" class="headerlink" title="401 Unauthorized是什么异常？"></a>401 Unauthorized是什么异常？</h2><p>昨天在制作视频播放的时候，出现这个错误，我还以为是Vue组件不行，一直百度都没找到问题，最后问同事才知道原来小题大做了！<a id="more"></a></p><pre><code>原因：401就是未授权的意思，所以注意检查一下你是否有相关的权限，是否有参数错误等情况。其实就是被拦截了，因为后台做了请求拦截处理，所以当请求视频这个文件时，被拦截了，就报401 Unauthorized错误了！所以只需要放开就行了！</code></pre><p>记录一下，牢记这个错误，以免忘记！</p>]]></content>
      
      
      <categories>
          
          <category> Java异常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 属性赋值的正确写法</title>
      <link href="/2019/05/27/CSS%20%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%86%99%E6%B3%95/"/>
      <url>/2019/05/27/CSS%20%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-属性赋值的正确写法"><a href="#CSS-属性赋值的正确写法" class="headerlink" title="CSS 属性赋值的正确写法"></a>CSS 属性赋值的正确写法</h2><p>对前端的不熟悉，有时候属性值的格式都会赋值错，所以记录一下，让自己更深刻！<a id="more"></a><br>错误写法：</p><pre><code>box-shadow: 0px !important;</code></pre><p>正确写法：</p><pre><code>box-shadow: none !important;</code></pre><p>错误 写法：</p><pre><code>padding: none !important;</code></pre><p>正确写法：</p><pre><code>padding: 0 !important; </code></pre><p>我只是举两个例子，或许我还经常写错别的！<br> <img src="https://img-blog.csdnimg.cn/20190527193153751.jpg" alt="在这里插入图片描述"><br>像这种出现黄色的，就说明赋值有问题 ！这是一种判断赋值错误的一种 方式。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot分页</title>
      <link href="/2019/05/27/SpringBoot%E5%88%86%E9%A1%B5/"/>
      <url>/2019/05/27/SpringBoot%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot分页"><a href="#SpringBoot分页" class="headerlink" title="SpringBoot分页"></a>SpringBoot分页</h2><p>记一下，怕忘记！<a id="more"></a><br>Springboot自带了一个分页，使得分页问题变得简单了。<br>前端只需要传入两个参数到后台：<br>一个是size(后台：每页显示条数，默认 10)<br>一个是curr（后台：当前页，默认1）<br>当前台传入这两个参数时，会自动映射到SpringBoot自带的一个Page实体类中，然后将返回值的类型改为IPage&lt;&gt;即可。<br>实例代码：<br>Controller类：</p><pre><code>@RequestMapping(&quot;/task/page&quot;)    public Result getTaskPage(Page page, @RequestParam Map&lt;String, String&gt; param) {        return ResultFactory.success(sceneTaskService.getTaskPage(page, param));    }</code></pre><p>Service类：</p><pre><code>@Override    public IPage&lt;Map&gt; getTaskPage(Page page, Map&lt;String, String&gt; param) {        param.put(&quot;dataStatus&quot;, GlobalConstant.DATA_STATUS_VALID);        return sceneTaskMapper.getTask(page, param);    }</code></pre><p>Mapper类：</p><pre><code>IPage&lt;Map&gt; getTask(Page page, @Param(&quot;p&quot;)Map&lt;String, String&gt; param);</code></pre><p>这样就可以实现后台分页了！</p><p>说说在玩分页时遇到的一些问题：<br>1.有一次玩分页，前台传参正常，后台接收也没问题，但就是不能分页，找问题找了好长时间也没找到，<br>最后才发现是没有配置Springboot分页插件导致的！得注意。</p><p>2.有一次玩分页，前台传参正常，我是用@RequestBody注解接收前台传过来变量的，post请求的，发现分页一直没用，<br>后来改成了@RequestParam注解接收前台传过来的变量，用get请求，发现就可以了。不过至今我也没查找到是什么原因。。。</p>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue css &gt;&gt;&gt; /deep/ 穿透</title>
      <link href="/2019/05/27/vue%20css%20%20deep%20%E7%A9%BF%E9%80%8F/"/>
      <url>/2019/05/27/vue%20css%20%20deep%20%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-css-gt-gt-gt-deep-穿透"><a href="#vue-css-gt-gt-gt-deep-穿透" class="headerlink" title="vue css &gt;&gt;&gt; /deep/ 穿透"></a>vue css &gt;&gt;&gt; /deep/ 穿透</h2><p>对于前段不熟悉，所以很多东西都要记录一下。<a id="more"></a><br>需求：强制覆盖父组件的样式<br>vue引用了第三方组件，需要在组件中局部修改第三方组件的样式，而又不想去除scoped属性造成组件之间的样式污染。此时只能通过&gt;&gt;&gt;，穿透scoped。<br>有些Sass 之类的预处理器无法正确解析 &gt;&gt;&gt;。可以使用 /deep/ 操作符( &gt;&gt;&gt; 的别名)。<br>格式：</p><pre><code>&lt;style scoped&gt;  外层 &gt;&gt;&gt; 第三方组件 {      样式  }/deep/  第三方组件 {      样式  }&lt;/style&gt;</code></pre><p>实例：</p><pre><code>/deep/ .h-btn {     box-shadow: none !important；  }</code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端 拷贝</title>
      <link href="/2019/05/22/%E5%89%8D%E7%AB%AF%E6%8B%B7%E8%B4%9D/"/>
      <url>/2019/05/22/%E5%89%8D%E7%AB%AF%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="前端-拷贝"><a href="#前端-拷贝" class="headerlink" title="前端 拷贝"></a>前端 拷贝</h2><p>记录一下呗！<a id="more"></a></p><p>需求：将两个变量的数据合并到新的变量的数据中。<br>浅拷贝：（合并第一种方式）</p><pre><code>srcObj = {  &apos;name&apos;: &apos;明&apos;,  grade: {    &apos;chi&apos;: &apos;50&apos;,    &apos;eng&apos;: &apos;50&apos;  }};copyObj2 = Object.assign({}, srcObj);copyObj2.name = &apos;红&apos;;copyObj2.grade.chi = &apos;60&apos;;console.log(&apos;新 objec srcObj&apos;, srcObj); // { name: &apos;明&apos;, grade: { chi: &apos;60&apos;, eng: &apos;50&apos; } }</code></pre><p>从例子中可以看出，改变复制对象的name 和 grade.chi ，源对象的name没有变化，但是grade.chi却被改变了。因此我们可以看出Object.assign()拷贝的只是属性值，假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。<br>合并：</p><pre><code>let param = { ...this.queryParam, ...this.pagination };</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端遍历</title>
      <link href="/2019/05/22/%E5%89%8D%E7%AB%AF%E9%81%8D%E5%8E%86/"/>
      <url>/2019/05/22/%E5%89%8D%E7%AB%AF%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前端遍历"><a href="#前端遍历" class="headerlink" title="前端遍历"></a>前端遍历</h2><p>好记性不如烂笔头！<a id="more"></a><br>需求：将一个数据格式为： arr[key:value,key:value]的遍历，做一些处理，然后在添加进数组。</p><ol><li><p>let obj = HeyUI.getDict(‘sceneType’);  //数组对象   </p><pre><code>for(let i in obj){ var str={    key:i,  // key    title:obj[i]  //value    }  this.dicts.type.push(str);</code></pre></li><li><p>Object.keys(obj).forEach((key) =&gt; {<br>HeyUI.addDict(key, obj[key]);<br>});</p><p>3.Es6语法遍历<br>let nums = [1,2,3,5,10];<br>let fives = [];<br>nums.forEach(v =&gt; {<br>if (v % 5 === 0)<br>fives.push(v);<br>});<br>console.log(fives); //[5,10]</p><p>4.map方式遍历<br>let pline2 = data[a].addressBase.polyline.split(‘;’);<br>let path2 = pline2.map(v =&gt; {<br>  return [v.split(‘,’)[0], v.split(‘,’)[1]];<br>});</p><p>5.map es6语法<br>let myMap = new Map();<br>myMap.set(0, “zero”);<br>myMap.set(1, “one”);<br>myMap.set(2, “two”);</p><p>// 遍历 key 和 value<br>for (let [key, value] of myMap) {<br>console.log(key + “ = “ + value);<br>}<br>for (let [key, value] of myMap.entries()) {<br>console.log(key + “ = “ + value);<br>}</p><p>// 只遍历 key<br>for (let key of myMap.keys()) {<br>console.log(key);<br>}</p><p>// 只遍历 value<br>for (let value of myMap.values()) {<br>console.log(value);<br>}  </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的hover事件</title>
      <link href="/2019/05/22/Vue%E7%9A%84hover%E4%BA%8B%E4%BB%B6/"/>
      <url>/2019/05/22/Vue%E7%9A%84hover%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue的hover事件"><a href="#Vue的hover事件" class="headerlink" title="Vue的hover事件"></a>Vue的hover事件</h2><p>因为Vue刚开始使用不久，所以对于Vue的知识点都不知道，因此在这记录一下。<a id="more"></a><br>需求：对于所遍历的数据都加上一个hover事件，当鼠标放在某条数据上时，做一些操作，当鼠标移开时，停止这些操作。<br>这里的难点就在于 只有鼠标所放的数据才触发事件，别的数据不触发事件。不说了，放实例代码，只贴出了核心代码。</p><pre><code>&lt;Cell v-for=&apos;(d,index ) of datas&apos; :xs=&apos;12&apos; :sm=&apos;8&apos; :md=&apos;8&apos; :lg=&apos;8&apos; :xl=&apos;8&apos; :key=&quot;index&quot;&gt;              &lt;div :height=&quot;contentHeight&quot; @mouseenter=&quot;mouseover(d)&quot; @mouseleave=&quot;mouseLeave(d)&quot; &gt; mouseover(d){//移进显示      let _this=this;      this.$nextTick(function () {          this.datas.forEach(function (d) {            _this.$set(d,&apos;show&apos;,false);          });          this.$set(d,&apos;show&apos;,true);        });      },    mouseLeave(d){//移出不显示       this.$set(d,&apos;show&apos;,false);    }</code></pre><p>完！</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯CSS3实现的鼠标悬停显示遮罩效果</title>
      <link href="/2019/05/22/%E7%BA%AFCSS3%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%BC%A0%E6%A0%87%E6%82%AC%E5%81%9C%E6%98%BE%E7%A4%BA%E9%81%AE%E7%BD%A9%E6%95%88%E6%9E%9C/"/>
      <url>/2019/05/22/%E7%BA%AFCSS3%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%BC%A0%E6%A0%87%E6%82%AC%E5%81%9C%E6%98%BE%E7%A4%BA%E9%81%AE%E7%BD%A9%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="纯CSS3实现的鼠标悬停显示遮罩效果"><a href="#纯CSS3实现的鼠标悬停显示遮罩效果" class="headerlink" title="纯CSS3实现的鼠标悬停显示遮罩效果"></a>纯CSS3实现的鼠标悬停显示遮罩效果</h2><p>对于前段不熟悉的我只有多记录记录所用过的技术了。。<a id="more"></a><br>需求：当鼠标放到图片上时，图片上方将出现一个带透明度的遮罩层。<br>贴代码：</p><pre><code>&lt;div :height=&quot;contentHeight&quot;&gt;                &lt;Avatar :width=&quot;66&quot; :src=&quot;src&quot; class=&quot;**he_slideCaptionDown**&quot;&gt;                  &lt;div v-font=&quot;12&quot; v-color:dark&gt;                    &lt;p&gt;姓名：{{d.pname}}&lt;/p&gt;                    &lt;p&gt;编号：{{d.pcode}}&lt;/p&gt;                  &lt;/div&gt;                  &lt;div class=&quot;**he_slideCaptionDown_caption**&quot;&gt;                      &lt;div class=&quot;**he_slideCaptionDown_caption_h**&quot;&gt;                          &lt;div class=&quot;h-tooltip-show&quot;&gt;                              &lt;Button  color=&quot;green&quot; @click.stop=&quot;open(&apos;edit&apos;, d.uuid)&quot; style=&quot;border:0px;border-radius: 0px&quot;&gt;修改&lt;/Button&gt;                              &lt;Poptip content=&quot;确认删除?&quot; @confirm=&quot;del(d.uuid)&quot;&gt;                                &lt;Button  color=&quot;red&quot;  style=&quot;border:0px;border-radius: 0px;&quot;&gt;删除&lt;/Button&gt;                              &lt;/Poptip&gt;                          &lt;/div&gt;                      &lt;/div&gt;                  &lt;/div&gt;                &lt;/Avatar&gt;              &lt;/div&gt;</code></pre><p>   样式主要为上面<strong> </strong>中的代码，其他样式这里暂时用不到，其他的样式是用来其他效果的，具体看这个网址：<a href="https://www.helloweba.net/javascript/312.html。" target="_blank" rel="noopener">https://www.helloweba.net/javascript/312.html。</a><br>   示例图：<br>    <img src="https://img-blog.csdnimg.cn/20190522200814346.png" alt="鼠标悬停时出现遮罩"><br>   需要引入的样式为：<br>   .</p><pre><code>he_border1 {    background: #fe7253;    width: 360px;    height: 240px;    padding: 0;    margin: 0;    border: 1px solid #000;    position: relative;    box-sizing: border-box;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_border1 .he_border1_img {    display: block;    width: 100%;    padding: 0;    margin: 0;    position: relative;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    opacity: 1;    overflow: hidden}.he_border1:hover .he_border1_img {    position: absolute;    -webkit-transform: scale(1.1);    -moz-transform: scale(1.1);    -o-transform: scale(1.1);    -ms-transform: scale(1.1);    transform: scale(1.1);    opacity: .6}.he_border1 .he_border1_caption {    color: #fff;    padding: 0;    margin: 0;    -moz-backface-visibility: hidden;    -webkit-backface-visibility: hidden;    backface-visibility: hidden;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_border1 .he_border1_caption::before,.he_border1 .he_border1_caption::after {    position: absolute;    content: &apos;&apos;;    opacity: 0;    -webkit-transition: opacity 0.4s, -webkit-transform .4s;    -moz-transition: opacity 0.4s, -moz-transform .4s;    -o-transition: opacity 0.4s, -o-transform .4s;    transition: opacity 0.4s, transform .4s}.he_border1 .he_border1_caption::before {    top: 8%;    right: 10%;    bottom: 8%;    left: 10%;    border-top: 1px solid #fff;    border-bottom: 1px solid #fff;    -webkit-transform: scale(0, 1);    -moz-transform: scale(0, 1);    -o-transform: scale(0, 1);    transform: scale(0, 1);    -webkit-transform-origin: 0 0;    -moz-transform-origin: 0 0;    -o-transform-origin: 0 0;    transform-origin: 0 0}.he_border1 .he_border1_caption::after {    top: 8%;    right: 10%;    bottom: 8%;    left: 10%;    border-right: 1px solid #fff;    border-left: 1px solid #fff;    -webkit-transform: scale(1, 0);    -moz-transform: scale(1, 0);    -o-transform: scale(1, 0);    transform: scale(1, 0);    -webkit-transform-origin: 100% 0;    -moz-transform-origin: 100% 0;    -o-transform-origin: 100% 0;    transform-origin: 100% 0}.he_border1:hover .he_border1_caption::before,.he_border1:hover .he_border1_caption::after {    opacity: 1;    -webkit-transform: scale(1);    -moz-transform: scale(1);    -o-transform: scale(1);    transform: scale(1)}.he_border1 .he_border1_caption,.he_border1 .he_border1_caption&gt;a {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden;    z-index: 1000}.he_border1 .he_border1_caption_h {    font-size: 1.3em;    font-weight: 700;    text-align: center;    width: 80%;    position: absolute;    top: 20%;    left: 10%;    -webkit-transition: all .5s ease-in-out;    -moz-transition: all .5s ease-in-out;    -o-transition: all .5s ease-in-out;    -ms-transition: all .5s ease-in-out;    transition: all .5s ease-in-out;    overflow: hidden;    opacity: 1}.he_border1 .he_border1_caption_p {    font-size: 1em;    text-align: center;    width: 80%;    position: absolute;    top: 60%;    left: 10%;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden;    opacity: 0}.he_border1:hover .he_border1_caption_p {    top: 45%;    opacity: 1}.he_border2 {    background: #fe7253;    width: 360px;    height: 240px;    padding: 0;    margin: 0;    border: 1px solid #000;    position: relative;    box-sizing: border-box;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_border2 .he_border2_img {    display: block;    width: 100%;    padding: 0;    margin: 0;    position: relative;    opacity: 1;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_border2:hover .he_border2_img {    position: absolute;    -webkit-transform: scale(1.1);    -moz-transform: scale(1.1);    -o-transform: scale(1.1);    -ms-transform: scale(1.1);    transform: scale(1.1);    opacity: .6}.he_border2 .he_border2_caption {    color: #fff;    padding: 0;    margin: 0;    -moz-backface-visibility: hidden;    -webkit-backface-visibility: hidden;    backface-visibility: hidden;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_border2 .he_border2_caption::before,.he_border2 .he_border2_caption::after {    position: absolute;    content: &apos;&apos;;    opacity: 0;    -webkit-transition: opacity 0.4s, -webkit-transform .4s;    -moz-transition: opacity 0.4s, -moz-transform .4s;    -o-transition: opacity 0.4s, -o-transform .4s;    transition: opacity 0.4s, transform .4s}.he_border2 .he_border2_caption::before {    top: 14%;    right: 5%;    bottom: 14%;    left: 5%;    border-top: 1px solid #fff;    border-bottom: 1px solid #fff;    -webkit-transform: scale(0, 1);    -moz-transform: scale(0, 1);    -o-transform: scale(0, 1);    transform: scale(0, 1);    -webkit-transform-origin: 0 0;    -moz-transform-origin: 0 0;    -o-transform-origin: 0 0;    transform-origin: 0 0}.he_border2 .he_border2_caption::after {    top: 8%;    right: 10%;    bottom: 8%;    left: 10%;    border-right: 1px solid #fff;    border-left: 1px solid #fff;    -webkit-transform: scale(1, 0);    -moz-transform: scale(1, 0);    -o-transform: scale(1, 0);    transform: scale(1, 0);    -webkit-transform-origin: 100% 0;    -moz-transform-origin: 100% 0;    -o-transform-origin: 100% 0;    transform-origin: 100% 0}.he_border2:hover .he_border2_caption::before,.he_border2:hover .he_border2_caption::after {    opacity: 1;    -webkit-transform: scale(1);    -moz-transform: scale(1);    -o-transform: scale(1);    transform: scale(1)}.he_border2 .he_border2_caption,.he_border2 .he_border2_caption&gt;a {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden;    z-index: 1000}.he_border2 .he_border2_caption_h {    font-size: 1.3em;    font-weight: 700;    text-align: center;    width: 80%;    position: absolute;    top: 20%;    left: 10%;    -webkit-transition: all .5s ease-in-out;    -moz-transition: all .5s ease-in-out;    -o-transition: all .5s ease-in-out;    -ms-transition: all .5s ease-in-out;    transition: all .5s ease-in-out;    overflow: hidden;    opacity: 1}.he_border2 .he_border2_caption_p {    font-size: 1em;    text-align: center;    width: 80%;    position: absolute;    top: 60%;    left: 10%;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden;    opacity: 0}.he_border2:hover .he_border2_caption_p {    top: 45%;    opacity: 1}.he_border3 {    background: #fe7253;    width: 360px;    height: 240px;    padding: 0;    margin: 0;    border: 1px solid #000;    position: relative;    box-sizing: border-box;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_border3 .he_border3_img {    display: block;    width: 100%;    padding: 0;    margin: 0;    position: relative;    opacity: 1;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_border3:hover .he_border3_img {    position: absolute;    -webkit-transform: scale(1.1);    -moz-transform: scale(1.1);    -o-transform: scale(1.1);    -ms-transform: scale(1.1);    transform: scale(1.1);    opacity: .6}.he_border3 .he_border3_caption {    color: #fff;    padding: 0;    margin: 0;    -moz-backface-visibility: hidden;    -webkit-backface-visibility: hidden;    backface-visibility: hidden;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_border3 .he_border3_caption::before,.he_border3 .he_border3_caption::after {    position: absolute;    content: &apos;&apos;;    opacity: 0;    -webkit-transition: opacity 0.4s, -webkit-transform .4s;    -moz-transition: opacity 0.4s, -moz-transform .4s;    -o-transition: opacity 0.4s, -o-transform .4s;    transition: opacity 0.4s, transform .4s}.he_border3 .he_border3_caption::before {    top: 14%;    right: 25%;    bottom: 14%;    left: 25%;    border-top: 1px solid #fff;    border-bottom: 1px solid #fff;    -webkit-transform: scale(0, 1);    -moz-transform: scale(0, 1);    -o-transform: scale(0, 1);    transform: scale(0, 1);    -webkit-transform-origin: 0 0;    -moz-transform-origin: 0 0;    -o-transform-origin: 0 0;    transform-origin: 0 0}.he_border3 .he_border3_caption::after {    top: 25%;    right: 10%;    bottom: 25%;    left: 10%;    border-right: 1px solid #fff;    border-left: 1px solid #fff;    -webkit-transform: scale(1, 0);    -moz-transform: scale(1, 0);    -o-transform: scale(1, 0);    transform: scale(1, 0);    -webkit-transform-origin: 100% 0;    -moz-transform-origin: 100% 0;    -o-transform-origin: 100% 0;    transform-origin: 100% 0}.he_border3:hover .he_border3_caption::before,.he_border3:hover .he_border3_caption::after {    opacity: 1;    -webkit-transform: scale(1);    -moz-transform: scale(1);    -o-transform: scale(1);    transform: scale(1)}.he_border3 .he_border3_caption,.he_border3 .he_border3_caption&gt;a {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden;    z-index: 1000}.he_border3 .he_border3_caption_h {    font-size: 1.3em;    font-weight: 700;    text-align: center;    width: 80%;    position: absolute;    top: 20%;    left: 10%;    -webkit-transition: all .5s ease-in-out;    -moz-transition: all .5s ease-in-out;    -o-transition: all .5s ease-in-out;    -ms-transition: all .5s ease-in-out;    transition: all .5s ease-in-out;    overflow: hidden;    opacity: 1}.he_border3 .he_border3_caption_p {    font-size: 1em;    text-align: center;    width: 80%;    position: absolute;    top: 60%;    left: 10%;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden;    opacity: 0}.he_border3:hover .he_border3_caption_p {    top: 45%;    opacity: 1}.he_3DFlipX {    display: block;    width: 360px;    height: 240px;    overflow: hidden;    padding: 0;    margin: 0;    border: 0;    position: relative;    box-sizing: border-box;    -webkit-perspective: 1700px;    -moz-perspective: 1700px;    perspective: 1700px;    -webkit-perspective-origin: 50% 50%;    -moz-perspective-origin: 50% 50%;    perspective-origin: 50% 50%}.he_3DFlipX_inner {    width: 100%;    height: 100%;    padding: 0;    margin: 0;    position: relative;    -webkit-transform-style: preserve-3d;    -moz-transform-style: preserve-3d;    transform-style: preserve-3d}.he_3DFlipX_inner&gt;div.he_3DFlipX_img {    backface-visibility: hidden;    -webkit-transition: all .5s ease-in-out;    -moz-transition: all .5s ease-in-out;    transition: all .5s ease-in-out}.he_3DFlipX_inner:hover&gt;div.he_3DFlipX_img {    -webkit-transform: rotateX(180deg);    -moz-transform: rotateX(180deg);    transform: rotateX(180deg)}.he_3DFlipX_inner&gt;div img {    max-width: 100%;    padding: 0;    margin: 0;    display: block;    position: relative}.he_3DFlipX_caption {    position: absolute;    top: 0;    left: 0;    padding: 0;    background: #fe7253;    color: #fff;    height: 100%;    width: 100%;    padding: 0;    margin: 0;    opacity: 0;    background-color: #fe7253;    text-align: center;    backface-visibility: hidden;    -webkit-transform: rotateX(-180deg);    -moz-transform: rotateX(-180deg);    transform: rotateX(-180deg);    -webkit-transition: all .5s ease-in-out;    -moz-transition: all .5s ease-in-out;    transition: all .5s ease-in-out}.he_3DFlipX_inner:hover .he_3DFlipX_caption {    opacity: 1;    -webkit-transform: rotateX(0);    -moz-transform: rotateX(0);    transform: rotateX(0)}.he_3DFlipX_caption h3 {    font-size: 1.3em;    font-weight: 700;    text-align: center;    width: 100%;    position: absolute;    top: 25%;    left: 5px;    margin: 0;    padding: 0;    color: #fff}.he_3DFlipX_caption p {    font-size: 1em;    text-align: center;    width: 100%;    position: absolute;    top: 45%;    left: 5px;    margin: 0;    padding: 0;    color: #fff}.he_3DFlipX a {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;    padding: 0;    margin: 0}.he_3DFlipY {    display: block;    width: 360px;    height: 240px;    overflow: hidden;    padding: 0;    margin: 0;    border: 0;    position: relative;    box-sizing: border-box;    cursor: pointer;    -webkit-perspective: 1700px;    -moz-perspective: 1700px;    perspective: 1700px;    -webkit-perspective-origin: 50% 50%;    -moz-perspective-origin: 50% 50%;    perspective-origin: 50% 50%}.he_3DFlipY_inner {    width: 100%;    height: 100%;    padding: 0;    margin: 0;    position: relative;    -webkit-transform-style: preserve-3d;    -moz-transform-style: preserve-3d;    transform-style: preserve-3d}.he_3DFlipY_inner&gt;div.he_3DFlipY_img {    backface-visibility: hidden;    -webkit-transition: all .5s ease-in-out;    -moz-transition: all .5s ease-in-out;    transition: all .5s ease-in-out}.he_3DFlipY_inner:hover&gt;div.he_3DFlipY_img {    -webkit-transform: rotateY(180deg);    -moz-transform: rotateY(180deg);    transform: rotateY(180deg)}.he_3DFlipY_inner&gt;div img {    max-width: 100%;    padding: 0;    margin: 0;    display: block;    position: relative}.he_3DFlipY_caption {    position: absolute;    top: 0;    left: 0;    padding: 0;    background: #fe7253;    color: #fff;    height: 100%;    width: 100%;    padding: 0;    margin: 0;    opacity: 0;    background-color: #fe7253;    text-align: center;    backface-visibility: hidden;    -webkit-transform: rotateY(-180deg);    -moz-transform: rotateY(-180deg);    transform: rotateY(-180deg);    -webkit-transition: all .5s ease-in-out;    -moz-transition: all .5s ease-in-out;    transition: all .5s ease-in-out}.he_3DFlipY_inner:hover .he_3DFlipY_caption {    opacity: 1;    -webkit-transform: rotateY(0);    -moz-transform: rotateY(0);    transform: rotateY(0)}.he_3DFlipY_caption h3 {    font-size: 1.3em;    font-weight: 700;    text-align: center;    width: 100%;    position: absolute;    top: 25%;    left: 5px;    margin: 0;    padding: 0;    color: #fff}.he_3DFlipY_caption p {    font-size: 1em;    text-align: center;    width: 100%;    position: absolute;    top: 45%;    left: 5px;    margin: 0;    padding: 0;    color: #fff}.he_3DFlipY a {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;    padding: 0;    margin: 0}.he_ZoomInImg {    background: #fe7253;    width: 360px;    height: 240px;    padding: 0;    margin: 0;    border: 1px solid #000;    position: relative;    box-sizing: border-box;    cursor: pointer;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_ZoomInImg .he_ZoomInImg_img {    position: relative;    display: block;    width: 100%;    padding: 0;    margin: 0;    opacity: 1;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_ZoomInImg:hover .he_ZoomInImg_img {    opacity: .7;    -webkit-transform: scale(1.3);    -moz-transform: scale(1.3);    -o-transform: scale(1.3);    -ms-transform: scale(1.3);    transform: scale(1.3)}.he_ZoomInImg .he_ZoomInImg_caption {    color: #fff;    -moz-backface-visibility: hidden;    -webkit-backface-visibility: hidden;    backface-visibility: hidden;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_ZoomInImg .he_ZoomInImg_caption,.he_ZoomInImg .he_ZoomInImg_caption&gt;a {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;    padding: 0;    margin: 0;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_ZoomInImg .he_ZoomInImg_caption_h {    font-size: 1.3em;    font-weight: 700;    text-align: center;    width: 80%;    position: absolute;    top: 20%;    left: 10%;    -webkit-transition: all .5s ease-in-out;    -moz-transition: all .5s ease-in-out;    -o-transition: all .5s ease-in-out;    -ms-transition: all .5s ease-in-out;    transition: all .5s ease-in-out;    overflow: hidden;    opacity: .8}.he_ZoomInImg:hover .he_ZoomInImg_caption_h {    color: #fff;    opacity: 1}.he_ZoomInImg .he_ZoomInImg_caption_p {    font-size: 1em;    text-align: center;    width: 80%;    position: absolute;    top: 45%;    left: 10%;    -webkit-transition: all .6s ease-in-out;    -moz-transition: all .6s ease-in-out;    -o-transition: all .6s ease-in-out;    -ms-transition: all .6s ease-in-out;    transition: all .6s ease-in-out;    overflow: hidden;    opacity: 0}.he_ZoomInImg:hover .he_ZoomInImg_caption_p {    color: #fff;    opacity: 1}.he_ZoomOutImg {    background: #fe7253;    width: 360px;    height: 240px;    padding: 0;    margin: 0;    border: 1px solid #000;    position: relative;    box-sizing: border-box;    cursor: pointer;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_ZoomOutImg .he_ZoomOutImg_img {    position: relative;    display: block;    width: 100%;    padding: 0;    margin: 0;    opacity: 1;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden;    -webkit-transform: scale(1.3);    -moz-transform: scale(1.3);    -o-transform: scale(1.3);    -ms-transform: scale(1.3);    transform: scale(1.3)}.he_ZoomOutImg:hover .he_ZoomOutImg_img {    opacity: .7;    -webkit-transform: scale(1);    -moz-transform: scale(1);    -o-transform: scale(1);    -ms-transform: scale(1);    transform: scale(1)}.he_ZoomOutImg .he_ZoomOutImg_caption {    color: #fff;    -moz-backface-visibility: hidden;    -webkit-backface-visibility: hidden;    backface-visibility: hidden;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_ZoomOutImg .he_ZoomOutImg_caption,.he_ZoomOutImg .he_ZoomOutImg_caption&gt;a {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;    padding: 0;    margin: 0;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_ZoomOutImg .he_ZoomOutImg_caption_h {    font-size: 1.3em;    font-weight: 700;    text-align: center;    width: 80%;    position: absolute;    top: 20%;    left: 10%;    -webkit-transition: all .5s ease-in-out;    -moz-transition: all .5s ease-in-out;    -o-transition: all .5s ease-in-out;    -ms-transition: all .5s ease-in-out;    transition: all .5s ease-in-out;    overflow: hidden;    opacity: .8}.he_ZoomOutImg:hover .he_ZoomOutImg_caption_h {    color: #fff;    opacity: 1}.he_ZoomOutImg .he_ZoomOutImg_caption_p {    font-size: 1em;    text-align: center;    width: 80%;    position: absolute;    top: 45%;    left: 10%;    -webkit-transition: all .6s ease-in-out;    -moz-transition: all .6s ease-in-out;    -o-transition: all .6s ease-in-out;    -ms-transition: all .6s ease-in-out;    transition: all .6s ease-in-out;    overflow: hidden;    opacity: 0}.he_ZoomOutImg:hover .he_ZoomOutImg_caption_p {    color: #fff;    opacity: 1}.he_slideCaptionDown {    /* background: #fe7253; */    background: none;    width: 100%;    height: 160px;    padding: 20px;    margin: 0;    border: 0px solid #000;    border-radius: 6px;    position: relative;    box-sizing: border-box;    cursor: pointer;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_slideCaptionDown .he_slideCaptionDown_caption {    color: #fff;    background: rgba(254, 114, 83, 0);    -moz-backface-visibility: hidden;    -webkit-backface-visibility: hidden;    backface-visibility: hidden;    -webkit-transform: translate3d(0, -100%, 0);    -moz-transform: translate3d(0, -100%, 0);    -o-transform: translate3d(0, -100%, 0);    -ms-transform: translate3d(0, -100%, 0);    transform: translate3d(0, -100%, 0);    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_slideCaptionDown:hover .he_slideCaptionDown_caption {    background: rgba(0, 0, 0, .65);    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0)}.he_slideCaptionDown .he_slideCaptionDown_caption,.he_slideCaptionDown .he_slideCaptionDown_caption&gt;a {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;    padding: 0;    margin: 0;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_slideCaptionDown .he_slideCaptionDown_caption_h {    /* font-size: 1.3em; */    font-weight: 700;    text-align: center;    /* width: 80%; */    position: absolute;    top: -50%;    right: 5px;    -webkit-transition: all .5s ease-in-out;    -moz-transition: all .5s ease-in-out;    -o-transition: all .5s ease-in-out;    -ms-transition: all .5s ease-in-out;    transition: all .5s ease-in-out;    overflow: hidden;    opacity: 0}.he_slideCaptionDown:hover .he_slideCaptionDown_caption_h {    /* color: #fff; */    top: 3%;    opacity: 1}.he_slideCaptionDown .he_slideCaptionDown_caption_p {    font-size: 1em;    text-align: center;    width: 80%;    position: absolute;    top: -50%;    left: 10%;    -webkit-transition: all .6s ease-in-out;    -moz-transition: all .6s ease-in-out;    -o-transition: all .6s ease-in-out;    -ms-transition: all .6s ease-in-out;    transition: all .6s ease-in-out;    overflow: hidden;    opacity: 0}.he_slideCaptionDown:hover .he_slideCaptionDown_caption_p {    color: #fff;    top: 45%;    opacity: 1}.he_slideAllDown {    background: #fe7253;    width: 360px;    height: 240px;    padding: 0;    margin: 0;    border: 1px solid #000;    position: relative;    box-sizing: border-box;    cursor: pointer;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_slideAllDown .he_slideAllDown_img {    position: relative;    display: block;    width: 100%;    padding: 0;    margin: 0;    opacity: .9;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_slideAllDown:hover .he_slideAllDown_img {    opacity: 1;    -webkit-transform: translate3d(0, 100%, 0);    -moz-transform: translate3d(0, 100%, 0);    -o-transform: translate3d(0, 100%, 0);    -ms-transform: translate3d(0, 100%, 0);    transform: translate3d(0, 100%, 0)}.he_slideAllDown .he_slideAllDown_caption {    color: #fff;    -moz-backface-visibility: hidden;    -webkit-backface-visibility: hidden;    backface-visibility: hidden;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_slideAllDown .he_slideAllDown_caption,.he_slideAllDown .he_slideAllDown_caption&gt;a {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;    padding: 0;    margin: 0;    -webkit-transition: all .4s ease-in-out;    -moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -ms-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;    overflow: hidden}.he_slideAllDown .he_slideAllDown_caption_h {    font-size: 1.3em;    font-weight: 700;    text-align: center;    width: 80%;    position: absolute;    top: -50%;    left: 70%;    -webkit-transition: all .5s ease-in-out;    -moz-transition: all .5s ease-in-out;    -o-transition: all .5s ease-in-out;    -ms-transition: all .5s ease-in-out;    transition: all .5s ease-in-out;    overflow: hidden;    opacity: 0}.he_slideAllDown:hover .he_slideAllDown_caption_h {    color: #fff;    top: 25%;    opacity: 1}.he_slideAllDown .he_slideAllDown_caption_p {    font-size: 1em;    text-align: center;    width: 80%;    position: absolute;    top: -50%;    left: 10%;    -webkit-transition: all .6s ease-in-out;    -moz-transition: all .6s ease-in-out;    -o-transition: all .6s ease-in-out;    -ms-transition: all .6s ease-in-out;    transition: all .6s ease-in-out;    overflow: hidden;    opacity: 0}.he_slideAllDown:hover .he_slideAllDown_caption_p {    color: #fff;    top: 45%;    opacity: 1}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目中遇见的小问题</title>
      <link href="/2019/04/25/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E8%A7%81%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2019/04/25/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E8%A7%81%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="项目中遇见的小问题"><a href="#项目中遇见的小问题" class="headerlink" title="项目中遇见的小问题"></a>项目中遇见的小问题</h2><p>在项目中常常会遇见各种各样的小问题，虽然只是小问题，但也很影响开发速度。所以，把遇到的小问题都记录下来，以免下次犯同样的问题不知道怎么解决。<a id="more"></a></p><ol><li><p>请求url正确，但请求不到数据，控制台也没有打印信息<br> 遇到这个问题时候注意了，当时遇到这个问题时，一头雾水，想debug，但压根没进入程序，也不报错。<br> 原因： 后台要用localhost访问请求，而前端发送请求的时候，压根就不是localhost的地址，而是服务器的地址。</p></li><li><p>用juint单元测试的时候测试成功，但运行项目的时候却报找不到jar包错误<br>原因：juint测试时使用的是本地jar包，如果项目中没有引入jar包，就会报找不到jar包。</p></li><li>在进行测试时，最好是把项目启动起来，因为有时候测试时需要项目加载所需要的依赖。<br> 比如：你测试类中需要用到IOC注入的bean，如果你没有启动项目，那就会报找不到bean错误。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 小问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邮件发送</title>
      <link href="/2019/04/18/%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
      <url>/2019/04/18/%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h2><p>项目中经常要使用到邮件发送，记录一下，方便下次使用。<a id="more"></a><br>首先导包。maven依赖。</p><pre><code>&lt;dependency&gt;            &lt;groupId&gt;io.github.biezhi&lt;/groupId&gt;            &lt;artifactId&gt;oh-my-email&lt;/artifactId&gt;            &lt;version&gt;0.0.4&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>然后就是邮件类。一个类是邮件发送的各种方式，一个类是处理邮件异常类。<br>邮件发送方式类</p><pre><code>package com.chinobot.common.email;import javax.activation.DataHandler;import javax.activation.FileDataSource;import javax.mail.*;import javax.mail.internet.*;import java.io.File;import java.net.URL;import java.util.*;public class OhMyEmail {    private static Session session;    private static String  user;    private MimeMessage        msg;    private String             text;    private String             html;    private List&lt;MimeBodyPart&gt; attachments = new ArrayList&lt;MimeBodyPart&gt;();    private OhMyEmail() {    }    public static Properties defaultConfig(Boolean debug) {        Properties props = new Properties();        props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);        props.put(&quot;mail.smtp.ssl.enable&quot;, &quot;true&quot;);        props.put(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);        props.put(&quot;mail.debug&quot;, null != debug ? debug.toString() : &quot;false&quot;);        props.put(&quot;mail.smtp.timeout&quot;, &quot;10000&quot;);        props.put(&quot;mail.smtp.port&quot;, &quot;465&quot;);        return props;    }    /**     * smtp entnterprise qq     *     * @param debug     * @return     */    public static Properties SMTP_ENT_QQ(boolean debug) {        Properties props = defaultConfig(debug);        props.put(&quot;mail.smtp.host&quot;, &quot;smtp.exmail.qq.com&quot;);        return props;    }    /**     * smtp qq     *     * @param debug enable debug     * @return     */    public static Properties SMTP_QQ(boolean debug) {        Properties props = defaultConfig(debug);        props.put(&quot;mail.smtp.host&quot;, &quot;smtp.qq.com&quot;);        return props;    }    /**     * smtp 163     *     * @param debug enable debug     * @return     */    public static Properties SMTP_163(Boolean debug) {        Properties props = defaultConfig(debug);        props.put(&quot;mail.smtp.host&quot;, &quot;smtp.163.com&quot;);        return props;    }    /**     * config username and password     *     * @param props    email property config     * @param username email auth username     * @param password email auth password     */    public static void config(Properties props, final String username, final String password) {        props.setProperty(&quot;username&quot;, username);        props.setProperty(&quot;password&quot;, password);        config(props);    }    public static void config(Properties props) {        final String username = props.getProperty(&quot;username&quot;);        final String password = props.getProperty(&quot;password&quot;);        user = username;        session = Session.getInstance(props, new Authenticator() {            protected PasswordAuthentication getPasswordAuthentication() {                return new PasswordAuthentication(username, password);            }        });    }    /**     * set email subject     *     * @param subject subject title     */    public static OhMyEmail subject(String subject) throws SendMailException {        OhMyEmail ohMyEmail = new OhMyEmail();        ohMyEmail.msg = new MimeMessage(session);        try {            ohMyEmail.msg.setSubject(subject, &quot;UTF-8&quot;);        } catch (Exception e) {            throw new SendMailException(e);        }        return ohMyEmail;    }    /**     * set email from     *     * @param nickName from nickname     */    public OhMyEmail from(String nickName) throws SendMailException {        return from(nickName, user);    }    /**     * set email nickname and from user     *     * @param nickName from nickname     * @param from     from email     */    public OhMyEmail from(String nickName, String from) throws SendMailException {        try {            String encodeNickName = MimeUtility.encodeText(nickName);            msg.setFrom(new InternetAddress(encodeNickName + &quot; &lt;&quot; + from + &quot;&gt;&quot;));        } catch (Exception e) {            throw new SendMailException(e);        }        return this;    }    public OhMyEmail replyTo(String... replyTo) throws SendMailException {        String result = Arrays.asList(replyTo).toString().replaceAll(&quot;(^\\[|\\]$)&quot;, &quot;&quot;).replace(&quot;, &quot;, &quot;,&quot;);        try {            msg.setReplyTo(InternetAddress.parse(result));        } catch (Exception e) {            throw new SendMailException(e);        }        return this;    }    public OhMyEmail replyTo(String replyTo) throws SendMailException {        try {            msg.setReplyTo(InternetAddress.parse(replyTo.replace(&quot;;&quot;, &quot;,&quot;)));        } catch (Exception e) {            throw new SendMailException(e);        }        return this;    }    public OhMyEmail to(String... to) throws SendMailException {        try {            return addRecipients(to, Message.RecipientType.TO);        } catch (MessagingException e) {            throw new SendMailException(e);        }    }    public OhMyEmail to(String to) throws SendMailException {        try {            return addRecipient(to, Message.RecipientType.TO);        } catch (MessagingException e) {            throw new SendMailException(e);        }    }    public OhMyEmail cc(String... cc) throws SendMailException {        try {            return addRecipients(cc, Message.RecipientType.CC);        } catch (MessagingException e) {            throw new SendMailException(e);        }    }    public OhMyEmail cc(String cc) throws SendMailException {        try {            return addRecipient(cc, Message.RecipientType.CC);        } catch (MessagingException e) {            throw new SendMailException(e);        }    }    public OhMyEmail bcc(String... bcc) throws SendMailException {        try {            return addRecipients(bcc, Message.RecipientType.BCC);        } catch (MessagingException e) {            throw new SendMailException(e);        }    }    public OhMyEmail bcc(String bcc) throws MessagingException {        return addRecipient(bcc, Message.RecipientType.BCC);    }    private OhMyEmail addRecipients(String[] recipients, Message.RecipientType type) throws MessagingException {        String result = Arrays.asList(recipients).toString().replace(&quot;(^\\[|\\]$)&quot;, &quot;&quot;).replace(&quot;, &quot;, &quot;,&quot;);        msg.setRecipients(type, InternetAddress.parse(result));        return this;    }    private OhMyEmail addRecipient(String recipient, Message.RecipientType type) throws MessagingException {        msg.setRecipients(type, InternetAddress.parse(recipient.replace(&quot;;&quot;, &quot;,&quot;)));        return this;    }    public OhMyEmail text(String text) {        this.text = text;        return this;    }    public OhMyEmail html(String html) {        this.html = html;        return this;    }    public OhMyEmail attach(File file) throws SendMailException {        attachments.add(createAttachment(file, null));        return this;    }    public OhMyEmail attach(File file, String fileName) throws SendMailException {        attachments.add(createAttachment(file, fileName));        return this;    }    public OhMyEmail attachURL(URL url, String fileName) throws SendMailException {        attachments.add(createURLAttachment(url, fileName));        return this;    }    private MimeBodyPart createAttachment(File file, String fileName) throws SendMailException {        MimeBodyPart   attachmentPart = new MimeBodyPart();        FileDataSource fds            = new FileDataSource(file);        try {            attachmentPart.setDataHandler(new DataHandler(fds));            attachmentPart.setFileName(null == fileName ? MimeUtility.encodeText(fds.getName()) : MimeUtility.encodeText(fileName));        } catch (Exception e) {            throw new SendMailException(e);        }        return attachmentPart;    }    private MimeBodyPart createURLAttachment(URL url, String fileName) throws SendMailException {        MimeBodyPart attachmentPart = new MimeBodyPart();        DataHandler dataHandler = new DataHandler(url);        try {            attachmentPart.setDataHandler(dataHandler);            attachmentPart.setFileName(null == fileName ? MimeUtility.encodeText(fileName) : MimeUtility.encodeText(fileName));        } catch (Exception e) {            throw new SendMailException(e);        }        return attachmentPart;    }    public void send() throws SendMailException {        if (text == null &amp;&amp; html == null) {            throw new IllegalArgumentException(&quot;At least one context has to be provided: Text or Html&quot;);        }        MimeMultipart cover;        boolean       usingAlternative = false;        boolean       hasAttachments   = attachments.size() &gt; 0;        try {            if (text != null &amp;&amp; html == null) {                // TEXT ONLY                cover = new MimeMultipart(&quot;mixed&quot;);                cover.addBodyPart(textPart());            } else if (text == null &amp;&amp; html != null) {                // HTML ONLY                cover = new MimeMultipart(&quot;mixed&quot;);                cover.addBodyPart(htmlPart());            } else {                // HTML + TEXT                cover = new MimeMultipart(&quot;alternative&quot;);                cover.addBodyPart(textPart());                cover.addBodyPart(htmlPart());                usingAlternative = true;            }            MimeMultipart content = cover;            if (usingAlternative &amp;&amp; hasAttachments) {                content = new MimeMultipart(&quot;mixed&quot;);                content.addBodyPart(toBodyPart(cover));            }            for (MimeBodyPart attachment : attachments) {                content.addBodyPart(attachment);            }            msg.setContent(content);            msg.setSentDate(new Date());            Transport.send(msg);        } catch (Exception e) {            throw new SendMailException(e);        }    }    private MimeBodyPart toBodyPart(MimeMultipart cover) throws MessagingException {        MimeBodyPart wrap = new MimeBodyPart();        wrap.setContent(cover);        return wrap;    }    private MimeBodyPart textPart() throws MessagingException {        MimeBodyPart bodyPart = new MimeBodyPart();        bodyPart.setText(text);        return bodyPart;    }    private MimeBodyPart htmlPart() throws MessagingException {        MimeBodyPart bodyPart = new MimeBodyPart();        bodyPart.setContent(html, &quot;text/html; charset=utf-8&quot;);        return bodyPart;    }}</code></pre><p>邮件处理异常类</p><pre><code>package com.chinobot.common.email;public class SendMailException extends Exception {    public SendMailException() {    }    public SendMailException(String message) {        super(message);    }    public SendMailException(Throwable cause) {        super(cause);    }}</code></pre><p>运行测试类</p><pre><code>/**     *     邮件推送     * @param email     */    private boolean emailPush(String email) {        // 配置，一次即可        OhMyEmail.config(SMTP_QQ(true), emailAccount, emailPassword);        try {            OhMyEmail.subject(&quot;这是一封测试TEXT邮件&quot;)            .from(fromAddress)            .to(&quot;2635287867@qq.com&quot;)            .text(emailText)            .send();        } catch (SendMailException e) {            e.printStackTrace();            return false;        }        return true;        }</code></pre><p>OhMyEmail为邮件类，emailAccount为QQ邮箱账号，emailPassword为QQ邮箱授权码（<strong>注意</strong>），fromAddress为从哪里发送邮箱，to表示你要发送给谁，emailTest为发送的文本。最后发送成功时可以看到</p><pre><code>DEBUG SMTP: message successfully delivered to mail serverQUIT221 Bye在做邮件发送时，遇到了一个错误：535 Error: ????????????????????: http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256 其中一个原因可能是  属性文件.properties中某个属性可能有有空格</code></pre><p>完！</p>]]></content>
      
      
      <categories>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>短信发送</title>
      <link href="/2019/04/12/%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81/"/>
      <url>/2019/04/12/%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="短信发送"><a href="#短信发送" class="headerlink" title="短信发送"></a>短信发送</h2><p>项目中经常要使用到短信发送，短信发送都是要付费的，这个也不例外，但是有15次免费测试，也还不错，记录一下。<a id="more"></a><br>第一：准备好三个包</p><pre><code>commons-codec-1.4.jarcommons-httpclient-3.1.jarcommons-logging-1.1.1.jar</code></pre><p>第二：你要去<a href="http://www.webchinese.com.cn/user/网建注册一个用户名和密码。" target="_blank" rel="noopener">www.webchinese.com.cn/user/网建注册一个用户名和密码。</a><br>第三：代码示例</p><pre><code>HttpClient client = new HttpClient();        PostMethod post = new PostMethod(&quot;http://sms.webchinese.cn/web_api/&quot;);        post.addRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded;charset=gbk&quot;);// 在头文件中设置转码        NameValuePair[] data = {        new NameValuePair(&quot;Uid&quot;, phoneUid), // 注册的用户名        new NameValuePair(&quot;Key&quot;, phoneKey), // 注册成功后,登录网站使用的密钥        new NameValuePair(&quot;smsMob&quot;, phone), // 手机号码        new NameValuePair(&quot;smsText&quot;, phoneSmsText)             };//设置短信内容        post.setRequestBody(data);        try {            client.executeMethod(post);        } catch (HttpException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        Header[] headers = post.getResponseHeaders();        int statusCode = post.getStatusCode();        System.out.println(&quot;statusCode:&quot; + statusCode);    //statusCode=200表示请示成功！        for (Header h : headers) {        System.out.println(h.toString());        }        String result = null;        try {            result = new String(post.getResponseBodyAsString().getBytes(&quot;gbk&quot;));            if(result.equals(&quot;200&quot;)) {                return true;            }        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        } //设置编码格式        System.out.println(result);        post.releaseConnection();        return false;</code></pre><p>注意*：</p><pre><code>*Uid 是你注册的用户名                   *Key是你的密钥，不是你的登录密码                   *Phone用户手机号码                   ***字符编码改成“gbk”</code></pre><p>smsText 短信内容<em>发送测试短信请勿输入：短信测试等词语，请直接提交您要发送的短信内容；<br>接口发送短信时请在内容后加签名：【XX公司或XX网名称】，否者会被屏蔽。<br>短信签名可在用户平台平台上设置，也可以在短信内容后，直接加入。<strong>**</strong></em>如果是验证码会秒到，如果是文字信息。API那边会审核，一般5分钟内如果收不到，那么信息应该被拦截了！</p><p>发送成功返回数据：</p><pre><code>statusCode:**200**Cache-Control: no-cacheContent-Length: 1Content-Type: text/htmlExpires: Sun, 03 Dec 2017 09:32:56 GMTServer: Microsoft-IIS/7.5Set-Cookie: CHNET=Temp%5Fusername=201712417325727965; expires=Sun, 30-Aug-2020 09:32:56 GMT; path=/Set-Cookie: ASPSESSIONIDCQAQSBDB=BEGJCEDCAFLAIHEIAFIGFBPF; path=/X-Powered-By: ASP.NETDate: Mon, 04 Dec 2017 09:32:56 GMT1</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis中Mapper相关问题</title>
      <link href="/2019/03/12/Mybatis%E4%B8%ADMapper.xml%E7%9A%84SQL/"/>
      <url>/2019/03/12/Mybatis%E4%B8%ADMapper.xml%E7%9A%84SQL/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis中Mapper-xml的SQL"><a href="#Mybatis中Mapper-xml的SQL" class="headerlink" title="Mybatis中Mapper.xml的SQL"></a>Mybatis中Mapper.xml的SQL</h2><p>在工作中，我们可能常常会碰见这样一个需求，根据不同的表单数据更新到不同的数据表中。点进来瞧瞧你有没有遇到这样的需求！<a id="more"></a><br>        比如有三个表单：楼栋任务的表单，房屋任务的表单，设施任务的表单<br>        现在要根据对不同表单的修改，然后将修改完的表单数据插入到相对应的数据表中，或许有人会说，根据串过来的参数，判断需要插入那张表不就行了，确实这种方法可以，但稍显笨重，有没有更好的方法么，有的，一起来看看吧。</p><pre><code> &lt;update id=&quot;updateTable&quot; parameterType=&quot;map&quot; statementType=&quot;STATEMENT&quot;&gt;                update ${tableName} set  ${field}=${value} where uuid=${uuid};    &lt;/update&gt;我们可以看到，表名是动态的，字段是动态的，值也是动态的，一条SQL就解决了这个需求，很简洁。这里的关键就是需要加一个  **statementType=&quot;STATEMENT&quot;**，这样它才能是动态的，千万记得。</code></pre>]]></content>
      
      
      <categories>
          
          <category> SSM框架问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis中动态SQL</title>
      <link href="/2019/03/12/Mybatis%E4%B8%AD%E5%8A%A8%E6%80%81SQL/"/>
      <url>/2019/03/12/Mybatis%E4%B8%AD%E5%8A%A8%E6%80%81SQL/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis中动态SQL-if-foreach…等等"><a href="#Mybatis中动态SQL-if-foreach…等等" class="headerlink" title="Mybatis中动态SQL(if,foreach…等等)"></a>Mybatis中动态SQL(if,foreach…等等)</h2><p>   记录一下，方便忘记时查找。<a id="more"></a></p><pre><code>1. statement中直接定义使用动态SQL（if-where）：</code></pre><p>在statement中利用if 和 where 条件组合达到我们的需求，通过一个例子来说明：<br>原SQL语句：</p><pre><code>&lt;select id=&quot;findUserByNameAndSex&quot; parameterType =&quot;User&quot; resultType=&quot;User&quot;&gt;    select * from user    where username = #{user.username} and sex = #{user.sex}&lt;/select&gt;</code></pre><p>现在需求是，如果返回值User为空或者User中的属性值为空的话（在这里就是user.username或者user.sex）为空的话我们怎么进行灵活的处理是程序不报异常。做法利用if和where判断进行SQL拼接。</p><pre><code>&lt;select id=&quot;findUserByNameAndSex&quot; parameterType =&quot;User&quot; resultType=&quot;User&quot;&gt;    select * from user&lt;where&gt;    &lt;if test=&quot;user != null&quot;&gt;        &lt;if test=&quot;user.username != null and user.username != &apos;&apos;&quot;&gt;&lt;!-- 注意and不能大写 --&gt;            and username = #{user.username}        &lt;/if&gt;        &lt;if test=&quot;user.sex != null and user.sex != &apos;&apos;&quot;&gt;            and sex = #{user.sex}        &lt;/if&gt;    &lt;/if&gt;&lt;/where&gt;</code></pre><p>有时候我们经常使用where 1=1这条语句来处理第一条拼接语句，我们可以使用&lt; where &gt; &lt; where /&gt;来同样实现这一功能，而且如果where能在第一次满足添加条件时会自动补全where这个单词，而且如果有and会替换掉。 </p><ol start="2"><li>使用foreach进行sql语句拼接</li></ol><p>在向sql传递数组或List，mybatis使用foreach解析，我们可以使用foreach中元素进行sql语句的拼接，请求数据。<br>通过一个例子来看：<br>需求：SELECT <em> FROM USER WHERE id=1 OR id=10 OR id=16<br>或者：SELECT </em> FROM USER WHERE id IN(1,10,16)</p><pre><code>&lt;if test=&quot;ids != null&quot;&gt;             &lt;foreach collection=&quot;ids&quot; item=&quot;user_id&quot; open=&quot;AND (&quot; close=&quot;)&quot; separator=&quot;or&quot; &gt;    每次遍历需要拼接的串                id= #{user_id}        &lt;/foreach&gt; &lt;/if&gt;</code></pre><p>其中，collection:指定输入对象中集合属性，item: 每个遍历生成对象，open：开始遍历时拼接串，close: 结束遍历是拼接的串，separator: 遍历的两个对象中需要拼接的串</p><pre><code>&lt;if test=&quot;ids != null&quot;&gt;         &lt;foreach collection=&quot;ids&quot; item=&quot;user_id&quot; open=&quot;and id IN(&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;                id= #{user_id}    &lt;/foreach&gt;&lt;if&gt;</code></pre><ol start="3"><li><p>choose、when、otherwise</p><p>类似于Java中的switch case default，即当有一个条件满足时，便不会往下继续判断了，当全部when都不满足时，执行otherwise。<br><select id="getEmpByChoose" resulttype="Emp" parametertype="Emp"></select></p><pre><code>select * from emp where 1 = 1&lt;choose&gt;    &lt;when test=&quot;job != null&quot;&gt;        and job = #{job}      //当job不为空时，下面的便不会再执行了    &lt;/when&gt;    &lt;when test=&quot;deptno != null&quot;&gt;        and deptno = #{deptno}    &lt;/when&gt;    &lt;otherwise&gt;        and mgr = #{mgr}    &lt;/otherwise&gt;&lt;/choose&gt;</code></pre> <select></select></li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql时间戳格式转换问题</title>
      <link href="/2019/03/12/Mysql%E6%97%B6%E9%97%B4%E6%88%B3%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
      <url>/2019/03/12/Mysql%E6%97%B6%E9%97%B4%E6%88%B3%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql时间戳转换问题"><a href="#Mysql时间戳转换问题" class="headerlink" title="Mysql时间戳转换问题"></a>Mysql时间戳转换问题</h2><p>   最近做项目时遇到一个奇怪问题，<a id="more"></a><br>        mysql中时间类型为timestamp，用<br>        SimpleDateFormat sd=new SimpleDateFormat(“YYYYMMdd”);<br>        String a =sd.format(time)   转换时报错了，说time不是一个date类型，然后我就将time转换成时间类型，还是报错，用java代码试了很多种方法还是报错，好气，最后在mysql语句中就将timestamp转换成字符串，最终解决了这个小问题。记录一下，印象更深刻！<br>        解决方式：</p><pre><code>FROM_UNIXTIME 格式化MYSQL时间戳函数        函数：FROM_UNIXTIME作用：将MYSQL中以INT(11)存储的时间以&quot;YYYY-MM-DD&quot;格式来显示。语法：FROM_UNIXTIME(unix_timestamp,format)返回表示 Unix 时间标记的一个字符串，根据format字符串格式化</code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2019/03/11/Windows%E4%B8%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/03/11/Windows%E4%B8%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="在windows下安装hexo"><a href="#在windows下安装hexo" class="headerlink" title="在windows下安装hexo"></a>在windows下安装hexo</h2><pre><code>    终于有一个属于自己的博客了，搭建这个虽然费了不少时间，但是很有意义。在工作中，我们时长会遇到一些难题，当时我们解决了，但没有记录下来，过了很长一段时间，又遇到了这个问题，可能这时候我们只能模糊记得当时是怎么做的，但不记得具体怎么做了，这时候或许后悔当时怎么没有记录下来。我就有这种感觉，所以搭建一个好看的博客，记录工作中的一些问题，当再次遇到时，拿出来看看，快速解决，这就是我搭建博客的初衷。欢迎大家观看我写的文章！</code></pre><a id="more"></a><p>hexo是什么？简单的说，就是一个静态博客的生成工具，我这个博客就是就是基于hexo生成的。<br>昨天才把这个博客用hexo折腾出来，所以想记录下来折腾的过程，留着以后备用。<br>这里只说如何在windows下成功安装hexo并运行起来，关于主题以及配置不做记录。<br>安装node.js<br>因为hexo是基于node.js的，所以node.js是必须要装的，安装也特别简单，去 官网 下载适合自己windows的版本。安装过程一直下一步就行了，什么也不用选，在网上查资料的时候，看到有说要在Custom Setup这一步记得选Add to PATH，但我在安装的时候这个选项是默认选好的，不用动它，也许是版本的原因，建议在安装时留意一下，毕竟自己配置环境变量还是有点麻烦。<br>安装好以后，打开CMD命令窗口，输入 npm -v ，如果出现版本号，那说明安装成功了并且环境变量也配置好了，如果是未知命令那就要配置一下环境变量。<br>安装hexo<br>这一步我是用git bash来安装的，如果安装了git，那么就可以用git bash，如果没有装，那就用CMD窗口，效果是一样一样的，命令都是一样的。<br>安装hexo的命令：</p><pre><code>npm install -g hexo-cli</code></pre><p>这一步安装的比较慢，可能跟网络环境有关，我在用git bash安装的时候半天没反应，然后用CMD安装成功了。<br>输入 hexo -v 出现一系列的版本号就是安装成功啦，就像下面这样：</p><pre><code>$ hexo -v   hexo: 3.4.2   hexo-cli: 1.0.4   os: Windows_NT 6.1.7601 win32 x64   http_parser: 2.7.0   node: 8.9.1   v8: 6.1.534.47   uv: 1.15.0   zlib: 1.2.11   ares: 1.10.1-DEV   modules: 57   nghttp2: 1.25.0   openssl: 1.0.2m   icu: 59.1   unicode: 9.0   cldr: 31.0.1   tz: 2017b</code></pre><p>生成博客<br>从现在开始，我们就可以用hexo来生成一个博客了。<br>首先新建一个文件夹，位置随意，然后 cd 到这个文件夹下，运行命令：<br>hexo init</p><p>hexo会将这个文件夹初始化成一个博客专用文件夹，生成过程稍微要点时间，耐心等待。<br>初始化完成后，会有一个默认主题以及一个hello-word的默认文章。所以我们可以先生成博客来看一下效果，运行命令：</p><pre><code>hexo generate  //可以简写成 hexo g</code></pre><p>然后hexo会开始生成博客，生成结束后，会多出一个public的文件夹，这个文件夹就是hexo生成的一个完整的静态网站，也就是我们的博客。网站生成好了，我们要浏览它，所以要开启一下服务器，运行命令：</p><pre><code>hexo server  //可以简写成 hexo s</code></pre><p>然后打开浏览器，输入 localhost:4000 就可以浏览我们的博客了。<br>远程部署<br>远程部署指的是，博客在我们本地生成好了以后部署到远程仓库去，如果远程仓库支持pages服务的话，那就可以通过这样的方法发布和更新博客。<br>要使用远程部署需要先安装hexo-deployer-git，注意，这是适用于git类型仓库的方法，其他仓库的方法在文章结尾提供的官网连接中有说明。<br>运行命令：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>安装好hexo-deployer-git后，修改博客目录配置文件中的deploy字段：</p><pre><code>deploy:  type: git  repo: git仓库项目地址  branch: 分支  message: 自定义提交说明，这个字段可以没有</code></pre><p>如果git仓库是ssh，则需要生成.ssh，这是git的操作，不做详述。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis中Mapper相关问题</title>
      <link href="/2019/03/12/Mybatis%E4%B8%ADMapper.xml%E7%9A%84SQL/"/>
      <url>/2019/03/12/Mybatis%E4%B8%ADMapper.xml%E7%9A%84SQL/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis中Mapper-xml的SQL"><a href="#Mybatis中Mapper-xml的SQL" class="headerlink" title="Mybatis中Mapper.xml的SQL"></a>Mybatis中Mapper.xml的SQL</h2><p>在工作中，我们可能常常会碰见这样一个需求，根据不同的表单数据更新到不同的数据表中。点进来瞧瞧你有没有遇到这样的需求！<a id="more"></a><br>        比如有三个表单：楼栋任务的表单，房屋任务的表单，设施任务的表单<br>        现在要根据对不同表单的修改，然后将修改完的表单数据插入到相对应的数据表中，或许有人会说，根据串过来的参数，判断需要插入那张表不就行了，确实这种方法可以，但稍显笨重，有没有更好的方法么，有的，一起来看看吧。</p><pre><code> &lt;update id=&quot;updateTable&quot; parameterType=&quot;map&quot; statementType=&quot;STATEMENT&quot;&gt;                update ${tableName} set  ${field}=${value} where uuid=${uuid};    &lt;/update&gt;我们可以看到，表名是动态的，字段是动态的，值也是动态的，一条SQL就解决了这个需求，很简洁。这里的关键就是需要加一个  **statementType=&quot;STATEMENT&quot;**，这样它才能是动态的，千万记得。</code></pre>]]></content>
      
      
      <categories>
          
          <category> SSM框架问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql时间戳格式转换问题</title>
      <link href="/2019/03/12/Mysql%E6%97%B6%E9%97%B4%E6%88%B3%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
      <url>/2019/03/12/Mysql%E6%97%B6%E9%97%B4%E6%88%B3%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql时间戳转换问题"><a href="#Mysql时间戳转换问题" class="headerlink" title="Mysql时间戳转换问题"></a>Mysql时间戳转换问题</h2><p>   最近做项目时遇到一个奇怪问题，<a id="more"></a><br>        mysql中时间类型为timestamp，用<br>        SimpleDateFormat sd=new SimpleDateFormat(“YYYYMMdd”);<br>        String a =sd.format(time)   转换时报错了，说time不是一个date类型，然后我就将time转换成时间类型，还是报错，用java代码试了很多种方法还是报错，好气，最后在mysql语句中就将timestamp转换成字符串，最终解决了这个小问题。记录一下，印象更深刻！<br>        解决方式：</p><pre><code>FROM_UNIXTIME 格式化MYSQL时间戳函数        函数：FROM_UNIXTIME作用：将MYSQL中以INT(11)存储的时间以&quot;YYYY-MM-DD&quot;格式来显示。语法：FROM_UNIXTIME(unix_timestamp,format)返回表示 Unix 时间标记的一个字符串，根据format字符串格式化</code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis中动态SQL</title>
      <link href="/2019/03/12/Mybatis%E4%B8%AD%E5%8A%A8%E6%80%81SQL/"/>
      <url>/2019/03/12/Mybatis%E4%B8%AD%E5%8A%A8%E6%80%81SQL/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis中动态SQL-if-foreach…等等"><a href="#Mybatis中动态SQL-if-foreach…等等" class="headerlink" title="Mybatis中动态SQL(if,foreach…等等)"></a>Mybatis中动态SQL(if,foreach…等等)</h2><p>   记录一下，方便忘记时查找。<a id="more"></a></p><pre><code>1. statement中直接定义使用动态SQL（if-where）：</code></pre><p>在statement中利用if 和 where 条件组合达到我们的需求，通过一个例子来说明：<br>原SQL语句：</p><pre><code>&lt;select id=&quot;findUserByNameAndSex&quot; parameterType =&quot;User&quot; resultType=&quot;User&quot;&gt;    select * from user    where username = #{user.username} and sex = #{user.sex}&lt;/select&gt;</code></pre><p>现在需求是，如果返回值User为空或者User中的属性值为空的话（在这里就是user.username或者user.sex）为空的话我们怎么进行灵活的处理是程序不报异常。做法利用if和where判断进行SQL拼接。</p><pre><code>&lt;select id=&quot;findUserByNameAndSex&quot; parameterType =&quot;User&quot; resultType=&quot;User&quot;&gt;    select * from user&lt;where&gt;    &lt;if test=&quot;user != null&quot;&gt;        &lt;if test=&quot;user.username != null and user.username != &apos;&apos;&quot;&gt;&lt;!-- 注意and不能大写 --&gt;            and username = #{user.username}        &lt;/if&gt;        &lt;if test=&quot;user.sex != null and user.sex != &apos;&apos;&quot;&gt;            and sex = #{user.sex}        &lt;/if&gt;    &lt;/if&gt;&lt;/where&gt;</code></pre><p>有时候我们经常使用where 1=1这条语句来处理第一条拼接语句，我们可以使用&lt; where &gt; &lt; where /&gt;来同样实现这一功能，而且如果where能在第一次满足添加条件时会自动补全where这个单词，而且如果有and会替换掉。 </p><ol start="2"><li>使用foreach进行sql语句拼接</li></ol><p>在向sql传递数组或List，mybatis使用foreach解析，我们可以使用foreach中元素进行sql语句的拼接，请求数据。<br>通过一个例子来看：<br>需求：SELECT <em> FROM USER WHERE id=1 OR id=10 OR id=16<br>或者：SELECT </em> FROM USER WHERE id IN(1,10,16)</p><pre><code>&lt;if test=&quot;ids != null&quot;&gt;             &lt;foreach collection=&quot;ids&quot; item=&quot;user_id&quot; open=&quot;AND (&quot; close=&quot;)&quot; separator=&quot;or&quot; &gt;    每次遍历需要拼接的串                id= #{user_id}        &lt;/foreach&gt; &lt;/if&gt;</code></pre><p>其中，collection:指定输入对象中集合属性，item: 每个遍历生成对象，open：开始遍历时拼接串，close: 结束遍历是拼接的串，separator: 遍历的两个对象中需要拼接的串</p><pre><code>&lt;if test=&quot;ids != null&quot;&gt;         &lt;foreach collection=&quot;ids&quot; item=&quot;user_id&quot; open=&quot;and id IN(&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;                id= #{user_id}    &lt;/foreach&gt;&lt;if&gt;</code></pre><ol start="3"><li><p>choose、when、otherwise</p><p>类似于Java中的switch case default，即当有一个条件满足时，便不会往下继续判断了，当全部when都不满足时，执行otherwise。<br><select id="getEmpByChoose" resulttype="Emp" parametertype="Emp"></select></p><pre><code>select * from emp where 1 = 1&lt;choose&gt;    &lt;when test=&quot;job != null&quot;&gt;        and job = #{job}      //当job不为空时，下面的便不会再执行了    &lt;/when&gt;    &lt;when test=&quot;deptno != null&quot;&gt;        and deptno = #{deptno}    &lt;/when&gt;    &lt;otherwise&gt;        and mgr = #{mgr}    &lt;/otherwise&gt;&lt;/choose&gt;</code></pre> <select></select></li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邮件推送</title>
      <link href="/2019/03/12/%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
      <url>/2019/03/12/%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h2><p>项目中经常要使用到邮件发送，记录一下，方便下次使用。<a id="more"></a><br>首先导包。maven依赖。</p><pre><code>&lt;dependency&gt;            &lt;groupId&gt;io.github.biezhi&lt;/groupId&gt;            &lt;artifactId&gt;oh-my-email&lt;/artifactId&gt;            &lt;version&gt;0.0.4&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>然后就是邮件类。一个类是邮件发送的各种方式，一个类是处理邮件异常类。<br>邮件发送方式类</p><pre><code>package com.chinobot.common.email;import javax.activation.DataHandler;import javax.activation.FileDataSource;import javax.mail.*;import javax.mail.internet.*;import java.io.File;import java.net.URL;import java.util.*;public class OhMyEmail {    private static Session session;    private static String  user;    private MimeMessage        msg;    private String             text;    private String             html;    private List&lt;MimeBodyPart&gt; attachments = new ArrayList&lt;MimeBodyPart&gt;();    private OhMyEmail() {    }    public static Properties defaultConfig(Boolean debug) {        Properties props = new Properties();        props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);        props.put(&quot;mail.smtp.ssl.enable&quot;, &quot;true&quot;);        props.put(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);        props.put(&quot;mail.debug&quot;, null != debug ? debug.toString() : &quot;false&quot;);        props.put(&quot;mail.smtp.timeout&quot;, &quot;10000&quot;);        props.put(&quot;mail.smtp.port&quot;, &quot;465&quot;);        return props;    }    /**     * smtp entnterprise qq     *     * @param debug     * @return     */    public static Properties SMTP_ENT_QQ(boolean debug) {        Properties props = defaultConfig(debug);        props.put(&quot;mail.smtp.host&quot;, &quot;smtp.exmail.qq.com&quot;);        return props;    }    /**     * smtp qq     *     * @param debug enable debug     * @return     */    public static Properties SMTP_QQ(boolean debug) {        Properties props = defaultConfig(debug);        props.put(&quot;mail.smtp.host&quot;, &quot;smtp.qq.com&quot;);        return props;    }    /**     * smtp 163     *     * @param debug enable debug     * @return     */    public static Properties SMTP_163(Boolean debug) {        Properties props = defaultConfig(debug);        props.put(&quot;mail.smtp.host&quot;, &quot;smtp.163.com&quot;);        return props;    }    /**     * config username and password     *     * @param props    email property config     * @param username email auth username     * @param password email auth password     */    public static void config(Properties props, final String username, final String password) {        props.setProperty(&quot;username&quot;, username);        props.setProperty(&quot;password&quot;, password);        config(props);    }    public static void config(Properties props) {        final String username = props.getProperty(&quot;username&quot;);        final String password = props.getProperty(&quot;password&quot;);        user = username;        session = Session.getInstance(props, new Authenticator() {            protected PasswordAuthentication getPasswordAuthentication() {                return new PasswordAuthentication(username, password);            }        });    }    /**     * set email subject     *     * @param subject subject title     */    public static OhMyEmail subject(String subject) throws SendMailException {        OhMyEmail ohMyEmail = new OhMyEmail();        ohMyEmail.msg = new MimeMessage(session);        try {            ohMyEmail.msg.setSubject(subject, &quot;UTF-8&quot;);        } catch (Exception e) {            throw new SendMailException(e);        }        return ohMyEmail;    }    /**     * set email from     *     * @param nickName from nickname     */    public OhMyEmail from(String nickName) throws SendMailException {        return from(nickName, user);    }    /**     * set email nickname and from user     *     * @param nickName from nickname     * @param from     from email     */    public OhMyEmail from(String nickName, String from) throws SendMailException {        try {            String encodeNickName = MimeUtility.encodeText(nickName);            msg.setFrom(new InternetAddress(encodeNickName + &quot; &lt;&quot; + from + &quot;&gt;&quot;));        } catch (Exception e) {            throw new SendMailException(e);        }        return this;    }    public OhMyEmail replyTo(String... replyTo) throws SendMailException {        String result = Arrays.asList(replyTo).toString().replaceAll(&quot;(^\\[|\\]$)&quot;, &quot;&quot;).replace(&quot;, &quot;, &quot;,&quot;);        try {            msg.setReplyTo(InternetAddress.parse(result));        } catch (Exception e) {            throw new SendMailException(e);        }        return this;    }    public OhMyEmail replyTo(String replyTo) throws SendMailException {        try {            msg.setReplyTo(InternetAddress.parse(replyTo.replace(&quot;;&quot;, &quot;,&quot;)));        } catch (Exception e) {            throw new SendMailException(e);        }        return this;    }    public OhMyEmail to(String... to) throws SendMailException {        try {            return addRecipients(to, Message.RecipientType.TO);        } catch (MessagingException e) {            throw new SendMailException(e);        }    }    public OhMyEmail to(String to) throws SendMailException {        try {            return addRecipient(to, Message.RecipientType.TO);        } catch (MessagingException e) {            throw new SendMailException(e);        }    }    public OhMyEmail cc(String... cc) throws SendMailException {        try {            return addRecipients(cc, Message.RecipientType.CC);        } catch (MessagingException e) {            throw new SendMailException(e);        }    }    public OhMyEmail cc(String cc) throws SendMailException {        try {            return addRecipient(cc, Message.RecipientType.CC);        } catch (MessagingException e) {            throw new SendMailException(e);        }    }    public OhMyEmail bcc(String... bcc) throws SendMailException {        try {            return addRecipients(bcc, Message.RecipientType.BCC);        } catch (MessagingException e) {            throw new SendMailException(e);        }    }    public OhMyEmail bcc(String bcc) throws MessagingException {        return addRecipient(bcc, Message.RecipientType.BCC);    }    private OhMyEmail addRecipients(String[] recipients, Message.RecipientType type) throws MessagingException {        String result = Arrays.asList(recipients).toString().replace(&quot;(^\\[|\\]$)&quot;, &quot;&quot;).replace(&quot;, &quot;, &quot;,&quot;);        msg.setRecipients(type, InternetAddress.parse(result));        return this;    }    private OhMyEmail addRecipient(String recipient, Message.RecipientType type) throws MessagingException {        msg.setRecipients(type, InternetAddress.parse(recipient.replace(&quot;;&quot;, &quot;,&quot;)));        return this;    }    public OhMyEmail text(String text) {        this.text = text;        return this;    }    public OhMyEmail html(String html) {        this.html = html;        return this;    }    public OhMyEmail attach(File file) throws SendMailException {        attachments.add(createAttachment(file, null));        return this;    }    public OhMyEmail attach(File file, String fileName) throws SendMailException {        attachments.add(createAttachment(file, fileName));        return this;    }    public OhMyEmail attachURL(URL url, String fileName) throws SendMailException {        attachments.add(createURLAttachment(url, fileName));        return this;    }    private MimeBodyPart createAttachment(File file, String fileName) throws SendMailException {        MimeBodyPart   attachmentPart = new MimeBodyPart();        FileDataSource fds            = new FileDataSource(file);        try {            attachmentPart.setDataHandler(new DataHandler(fds));            attachmentPart.setFileName(null == fileName ? MimeUtility.encodeText(fds.getName()) : MimeUtility.encodeText(fileName));        } catch (Exception e) {            throw new SendMailException(e);        }        return attachmentPart;    }    private MimeBodyPart createURLAttachment(URL url, String fileName) throws SendMailException {        MimeBodyPart attachmentPart = new MimeBodyPart();        DataHandler dataHandler = new DataHandler(url);        try {            attachmentPart.setDataHandler(dataHandler);            attachmentPart.setFileName(null == fileName ? MimeUtility.encodeText(fileName) : MimeUtility.encodeText(fileName));        } catch (Exception e) {            throw new SendMailException(e);        }        return attachmentPart;    }    public void send() throws SendMailException {        if (text == null &amp;&amp; html == null) {            throw new IllegalArgumentException(&quot;At least one context has to be provided: Text or Html&quot;);        }        MimeMultipart cover;        boolean       usingAlternative = false;        boolean       hasAttachments   = attachments.size() &gt; 0;        try {            if (text != null &amp;&amp; html == null) {                // TEXT ONLY                cover = new MimeMultipart(&quot;mixed&quot;);                cover.addBodyPart(textPart());            } else if (text == null &amp;&amp; html != null) {                // HTML ONLY                cover = new MimeMultipart(&quot;mixed&quot;);                cover.addBodyPart(htmlPart());            } else {                // HTML + TEXT                cover = new MimeMultipart(&quot;alternative&quot;);                cover.addBodyPart(textPart());                cover.addBodyPart(htmlPart());                usingAlternative = true;            }            MimeMultipart content = cover;            if (usingAlternative &amp;&amp; hasAttachments) {                content = new MimeMultipart(&quot;mixed&quot;);                content.addBodyPart(toBodyPart(cover));            }            for (MimeBodyPart attachment : attachments) {                content.addBodyPart(attachment);            }            msg.setContent(content);            msg.setSentDate(new Date());            Transport.send(msg);        } catch (Exception e) {            throw new SendMailException(e);        }    }    private MimeBodyPart toBodyPart(MimeMultipart cover) throws MessagingException {        MimeBodyPart wrap = new MimeBodyPart();        wrap.setContent(cover);        return wrap;    }    private MimeBodyPart textPart() throws MessagingException {        MimeBodyPart bodyPart = new MimeBodyPart();        bodyPart.setText(text);        return bodyPart;    }    private MimeBodyPart htmlPart() throws MessagingException {        MimeBodyPart bodyPart = new MimeBodyPart();        bodyPart.setContent(html, &quot;text/html; charset=utf-8&quot;);        return bodyPart;    }}</code></pre><p>邮件处理异常类</p><pre><code>package com.chinobot.common.email;public class SendMailException extends Exception {    public SendMailException() {    }    public SendMailException(String message) {        super(message);    }    public SendMailException(Throwable cause) {        super(cause);    }}</code></pre><p>运行测试类</p><pre><code>/**     *     邮件推送     * @param email     */    private boolean emailPush(String email) {        // 配置，一次即可        OhMyEmail.config(SMTP_QQ(true), emailAccount, emailPassword);        try {            OhMyEmail.subject(&quot;这是一封测试TEXT邮件&quot;)            .from(fromAddress)            .to(&quot;2635287867@qq.com&quot;)            .text(emailText)            .send();        } catch (SendMailException e) {            e.printStackTrace();            return false;        }        return true;        }</code></pre><p>OhMyEmail为邮件类，emailAccount为QQ邮箱账号，emailPassword为QQ邮箱授权码（<strong>注意</strong>），fromAddress为从哪里发送邮箱，to表示你要发送给谁，emailTest为发送的文本。最后发送成功时可以看到</p><pre><code>DEBUG SMTP: message successfully delivered to mail serverQUIT221 Bye</code></pre><p>完！</p>]]></content>
      
      
      <categories>
          
          <category> SSM框架问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2019/03/11/Windows%E4%B8%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/03/11/Windows%E4%B8%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="在windows下安装hexo"><a href="#在windows下安装hexo" class="headerlink" title="在windows下安装hexo"></a>在windows下安装hexo</h2><pre><code>    终于有一个属于自己的博客了，搭建这个虽然费了不少时间，但是很有意义。在工作中，我们时长会遇到一些难题，当时我们解决了，但没有记录下来，过了很长一段时间，又遇到了这个问题，可能这时候我们只能模糊记得当时是怎么做的，但不记得具体怎么做了，这时候或许后悔当时怎么没有记录下来。我就有这种感觉，所以搭建一个好看的博客，记录工作中的一些问题，当再次遇到时，拿出来看看，快速解决，这就是我搭建博客的初衷。欢迎大家观看我写的文章！</code></pre><a id="more"></a><p>hexo是什么？简单的说，就是一个静态博客的生成工具，我这个博客就是就是基于hexo生成的。<br>昨天才把这个博客用hexo折腾出来，所以想记录下来折腾的过程，留着以后备用。<br>这里只说如何在windows下成功安装hexo并运行起来，关于主题以及配置不做记录。<br>安装node.js<br>因为hexo是基于node.js的，所以node.js是必须要装的，安装也特别简单，去 官网 下载适合自己windows的版本。安装过程一直下一步就行了，什么也不用选，在网上查资料的时候，看到有说要在Custom Setup这一步记得选Add to PATH，但我在安装的时候这个选项是默认选好的，不用动它，也许是版本的原因，建议在安装时留意一下，毕竟自己配置环境变量还是有点麻烦。<br>安装好以后，打开CMD命令窗口，输入 npm -v ，如果出现版本号，那说明安装成功了并且环境变量也配置好了，如果是未知命令那就要配置一下环境变量。<br>安装hexo<br>这一步我是用git bash来安装的，如果安装了git，那么就可以用git bash，如果没有装，那就用CMD窗口，效果是一样一样的，命令都是一样的。<br>安装hexo的命令：</p><pre><code>npm install -g hexo-cli</code></pre><p>这一步安装的比较慢，可能跟网络环境有关，我在用git bash安装的时候半天没反应，然后用CMD安装成功了。<br>输入 hexo -v 出现一系列的版本号就是安装成功啦，就像下面这样：</p><pre><code>$ hexo -v   hexo: 3.4.2   hexo-cli: 1.0.4   os: Windows_NT 6.1.7601 win32 x64   http_parser: 2.7.0   node: 8.9.1   v8: 6.1.534.47   uv: 1.15.0   zlib: 1.2.11   ares: 1.10.1-DEV   modules: 57   nghttp2: 1.25.0   openssl: 1.0.2m   icu: 59.1   unicode: 9.0   cldr: 31.0.1   tz: 2017b</code></pre><p>生成博客<br>从现在开始，我们就可以用hexo来生成一个博客了。<br>首先新建一个文件夹，位置随意，然后 cd 到这个文件夹下，运行命令：<br>hexo init</p><p>hexo会将这个文件夹初始化成一个博客专用文件夹，生成过程稍微要点时间，耐心等待。<br>初始化完成后，会有一个默认主题以及一个hello-word的默认文章。所以我们可以先生成博客来看一下效果，运行命令：</p><pre><code>hexo generate  //可以简写成 hexo g</code></pre><p>然后hexo会开始生成博客，生成结束后，会多出一个public的文件夹，这个文件夹就是hexo生成的一个完整的静态网站，也就是我们的博客。网站生成好了，我们要浏览它，所以要开启一下服务器，运行命令：</p><pre><code>hexo server  //可以简写成 hexo s</code></pre><p>然后打开浏览器，输入 localhost:4000 就可以浏览我们的博客了。<br>远程部署<br>远程部署指的是，博客在我们本地生成好了以后部署到远程仓库去，如果远程仓库支持pages服务的话，那就可以通过这样的方法发布和更新博客。<br>要使用远程部署需要先安装hexo-deployer-git，注意，这是适用于git类型仓库的方法，其他仓库的方法在文章结尾提供的官网连接中有说明。<br>运行命令：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>安装好hexo-deployer-git后，修改博客目录配置文件中的deploy字段：</p><pre><code>deploy:  type: git  repo: git仓库项目地址  branch: 分支  message: 自定义提交说明，这个字段可以没有</code></pre><p>如果git仓库是ssh，则需要生成.ssh，这是git的操作，不做详述。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
